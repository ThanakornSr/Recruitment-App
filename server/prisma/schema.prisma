generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Applicant {
  id              Int           @id @default(autoincrement())
  fullName        String
  email           String        @unique
  phone           String?
  position        String
  status          DefaultStatus @default(PENDING)
  dateOfBirth     DateTime?
  appliedAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  updatedBy       String?
  applications    Application[]
  createdBy       User?         @relation("CreatedByUser", fields: [createdById], references: [id])
  createdById     Int?

  @@index([status])
  @@index([email])
  @@map("WSAT_applicants")
}

model Application {
  id          Int           @id @default(autoincrement())
  applicant   Applicant     @relation(fields: [applicantId], references: [id])
  applicantId Int
  status      DefaultStatus @default(PENDING)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  files       File[]

  @@map("applications")
}

model File {
  id            Int           @id @default(autoincrement())
  filePath      String
  fileType      FileType
  application   Application   @relation(fields: [applicationId], references: [id])
  applicationId Int
  uploader      User?         @relation(fields: [uploaderId], references: [id])
  uploaderId    Int?
  createdAt     DateTime      @default(now())

  @@map("WSAT_files")
}

model UserSession {
  id          Int       @id @default(autoincrement())
  userId      Int
  accessToken String    @unique
  userAgent   String?
  ipAddress   String?
  isActive    Boolean   @default(true)
  loginAt     DateTime  @default(now())
  logoutAt    DateTime?
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  updatedAt   DateTime  @updatedAt

  @@index([accessToken])
  @@index([userId])
  @@map("user_sessions")
}

model User {
  id                Int           @id @default(autoincrement())
  email             String        @unique
  passwordHash      String
  role              UserRole      @default(ADMIN)
  firstName         String?
  lastName          String?
  phoneNumber       String?
  isActive          Boolean       @default(true)
  lastLogin         DateTime?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  sessions          UserSession[]
  files             File[]
  createdApplicants Applicant[]    @relation("CreatedByUser")

  @@index([email])
  @@map("WSAT_User")
}

enum UserRole {
  ADMIN
  RECRUITER
  INTERVIEWER
}

enum DefaultStatus {
  PENDING
  WAIT_RESULT
  PASS_INTERVIEW
  REJECT_INTERVIEW
  REJECT
}

enum FileType {
  CV
  PHOTO
}
